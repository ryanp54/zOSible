#!/usr/bin/env python3
import os, sys, subprocess
import pdb, argparse, json, re, glob

from types import SimpleNamespace

import jinja2

# Setup shared parser arguments
parent_parser = argparse.ArgumentParser(add_help=False)
parent_parser.add_argument('-r', '--replace', action='store_true',
						   help='replace data set if it already exists')
# Setup Jinja2
jinja_loader = jinja2.FileSystemLoader(searchpath='./.zosible/templates')
jinja_env = jinja2.Environment(loader=jinja_loader)


def process():
	cmds = {
		'setup': setup,
		'submit': submit,
		'create': create,
		'delete': delete,
		'list': dslist,
		'fetch': fetch,
		'help': main_help}

	parser = argparse.ArgumentParser(
		description='Run a zOSible command.',
		# Use crazy character as hack to disable optional arg checks
		prefix_chars='\u9999',
		add_help=False)
	parser.add_argument(
		'command',
		choices=list(cmds.keys()),
		help='command to run')
	parser.add_argument(
		'argument',
		nargs='*',
		help='command specific argument')
	args = parser.parse_args()

	if args.command == 'help':
		main_help(parser)
	else:
 		cmds[args.command](args.argument)


def main_help(parser):
	parser.print_help()
	print('\nEnter a valid command with -h or --help'
		  'to diplay command specific help.\n')


def setup(args_list):
	cmd_desc = ('Setup Ansible host connection details and configuration '
			    'variables to be used with zOSible.')
	k_help = ('Prompt for password with each command '
			  'instead of setting up SSH keys.')
	n_help = ('Do not setup SSH keys and authentication. '
			  'Use this if setting up SSH keys manually.')

	parser = argparse.ArgumentParser(prog='zosible setup',
									 description=cmd_desc)
	parser.add_argument('-k', '--ask-pass', action='store_true', help=k_help)
	parser.add_argument('-n', '--no-ssh', action='store_true', help=n_help)

	cmdargs = parser.parse_args(args_list)

	# Set values for template from user input
	conn_info = {}
	conn_info['ansible_host'] = input('Enter IP address:')
	# TODO: Handle ports
	# conn_info['ansible_port'] = input(
	# 	'Enter ssh port or leave blank for default:')
	conn_info['ansible_user'] = input('Enter username:')

	if cmdargs.ask_pass == True:
		conn_info['ask_pass'] = True

	args = {'-i': conn_info['ansible_host'] + ','}
	if not cmdargs.no_ssh:
		args['-k'] = None

	run_playbook_w_vars('./host_setup.yaml', conn_info, args_dict=args)


def submit(args_list):
	parser = argparse.ArgumentParser(
		prog='zosible submit',
		description='Upload and submit a data set for execution.',
		parents=[parent_parser])
	parser.add_argument('local_file_name', help='local file to upload')
	parser.add_argument('data_set_name', nargs='?', default='',
						help='name of data set to create')
	cmdargs = parser.parse_args(args_list)

	# Add default computed args
	cmdargs.data_set_type = 'SEQ'
	cmdargs.exec_type = 'JCL'

	dsninfo = interpret_dsname(cmdargs.data_set_name)
	if dsninfo:
		cmdargs.data_set_name = dsninfo.name
		cmdargs.data_set_type = dsninfo.type
	else:
		del cmdargs.data_set_name

	with open(cmdargs.local_file_name) as file:
		firstln_txt = file.readline()

	if re.search(r"\/\*.*REXX.*\*\/", firstln_txt, re.I):
		cmdargs.exec_type = 'REXX'

	run_playbook_w_vars('./submit_job.yaml', vars(cmdargs))
	subprocess.run(['cat', './.zosible/output.txt'])


def create(args_list):
	parser = argparse.ArgumentParser(
		prog='zosible create',
		description='Create a data set from a local file',
		parents=[parent_parser])
	parser.add_argument('local_file_name', help='local file to upload')
	parser.add_argument('data_set_name', help='name of data set to create')
	cmdargs = parser.parse_args(args_list)

	dsninfo = interpret_dsname(cmdargs.data_set_name)
	if dsninfo:
		cmdargs.data_set_name = dsninfo.name
		cmdargs.data_set_type = dsninfo.type
		run_playbook_w_vars('./create.yaml', vars(cmdargs))
	else:
		print('Error: Invalid data set name.\n'
			  'Check z/OS data set naming requirements.')


def delete(args_list):
	parser = argparse.ArgumentParser(
		prog='zosible delete',
		description='Delele a data set or PDS member',
		parents=[parent_parser])
	parser.add_argument('data_set_name', help='name of data set to delete')
	cmdargs = parser.parse_args(args_list)

	dsninfo = interpret_dsname(cmdargs.data_set_name)
	if dsninfo:
		cmdargs.data_set_name = dsninfo.name
		cmdargs.data_set_type = dsninfo.type
		run_playbook_w_vars('./delete.yaml', vars(cmdargs))
	else:
		print('Error: Invalid data set name.\n'
			  'Check z/OS data set naming requirements.')

def fetch(args_list):
	parser = argparse.ArgumentParser(
		prog='zosible fetch',
		description='Download a data set to a local file',
		parents=[parent_parser])
	parser.add_argument('data_set_name', help='name of data set to download')
	parser.add_argument('local_file_name',
						help='where to place downloaded data set')
	cmdargs = parser.parse_args(args_list)

	dsninfo = interpret_dsname(cmdargs.data_set_name)
	if dsninfo:
		cmdargs.data_set_name = dsninfo.name
		if not cmdargs.local_file_name:
			cmdargs.local_file_name = cmdargs.data_set_name
		run_playbook_w_vars('./fetch.yaml', vars(cmdargs))
	else:
		print('Error: Invalid data set name.\n'
			  'Check z/OS data set naming requirements.')

def dslist(args_list):
	parser = argparse.ArgumentParser(
		prog='zosible list',
		description='List data sets',
		parents=[parent_parser])
	parser.add_argument('query', help='query to use to find data sets')

	cmdargs = parser.parse_args(args_list)

	cmdargs.query = cmdargs.query.upper()
	run_playbook_w_vars('./list.yaml', vars(cmdargs))


# Setup Ansible variables and run playbook via command.
def run_playbook_w_vars(playbook_name, vars_dict, args_dict={}):
	file_path = vars_dict.get('local_file_name')
	if file_path:
		vars_dict['local_file_name'] = os.path.abspath(file_path)

	args_list = ['-e', json.dumps(vars_dict)]
	for k, v in args_dict.items():
		args_list.append(k)
		if v is not None:
			args_list.append(v)

	subprocess.run(['ansible-playbook', *args_list, playbook_name],
				   cwd='./.zosible/')


def interpret_dsname(name):
	pattern = (r"^[a-zA-Z#@$]{1}[0-9a-zA-Z#@$-]{0,7}\."
			   r"[a-zA-Z#@$]{1}[0-9a-zA-Z#@$-]{0,7}"
			   r"(\.[a-zA-Z#@$]{1}[0-9a-zA-Z#@$-]{0,7})?"
			   r"(\([a-zA-Z#@$]{1}[0-9a-zA-Z#@$]{0,7}\))?$")

	matches = re.search(pattern, name)

	result = None
	if matches:
		result = SimpleNamespace(name=name.upper())
		result.type = 'MEMBER' if matches.group(2) else 'SEQ'

	return result


process()
