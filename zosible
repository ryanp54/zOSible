#!/usr/bin/env python3
import os, sys, subprocess
import pdb, argparse, re, glob

from types import SimpleNamespace

import jinja2

# Setup shared parser arguments
parent_parser = argparse.ArgumentParser(add_help=False)
parent_parser.add_argument('-r', '--replace', action='store_true',
						   help='replace data set if it already exists')
# Setup Jinja2
jinja_loader = jinja2.FileSystemLoader(searchpath='./.zosible/templates')
jinja_env = jinja2.Environment(loader=jinja_loader)


def process():
	cmds = {
		'setup': setup,
		'submit': submit,
		'create': create,
		'delete': delete,
		'help': main_help}

	parser = argparse.ArgumentParser(
		description='Run a zOSible command.',
		# Use crazy character as hack to disable optional arg checks
		prefix_chars='\u9999',
		add_help=False)
	parser.add_argument(
		'command',
		choices=list(cmds.keys()),
		help='command to run')
	parser.add_argument(
		'argument',
		nargs='*',
		help='command specific argument')
	args = parser.parse_args()

	if args.command == 'help':
		main_help(parser)
	else:
 		cmds[args.command](args.argument)


def main_help(parser):
	parser.print_help()
	print('\nEnter a valid command with -h or --help'
		  'to diplay command specific help.\n')


def setup(args_list):
	cmd_desc = ('Setup Ansible host connection details and configuration '
			    'variables to be used with zOSible.')
	k_help = ('Prompt for password with each command '
			  'instead of setting up SSH keys.')
	n_help = ('Do not setup SSH keys and authentication. '
			  'Use this if setting up SSH keys manually.')

	parser = argparse.ArgumentParser(prog='zosible setup',
									 description=cmd_desc)
	parser.add_argument('-k', '--ask-pass', action='store_true', help=k_help)
	parser.add_argument('-n', '--no-ssh', action='store_true', help=n_help)

	cmdargs = parser.parse_args(args_list)

	# Set values for template from user input
	conn_info = {}
	conn_info['target_host'] = '192.86.32.153' #input('Enter IP address:')
	conn_info['target_port'] = input(
		'Enter ssh port or leave blank for default:')
	conn_info['target_user'] = 'z00413' #input('Enter username:')

	if cmdargs.ask_pass:
		conn_info['ask_pass'] = True

	# Create host inventory file for initial connection
	# TODO?: Move this to playbook.
	write_from_template('./.zosible/inventory/host', 'inventory', conn_info)

	subproc_cmdlist = ['ansible-playbook', './host_setup.yaml']
	if not cmdargs.no_ssh:
		subproc_cmdlist.append('-k')

	# Setup new host inventory and host_vars
	subprocess.run(subproc_cmdlist, cwd='./.zosible/')
	# Clean up old, renamed host inventory
	oldf = glob.glob('./.zosible/inventory/host.*')
	if oldf:
		subprocess.run(['rm', oldf[0]], stdout=subprocess.DEVNULL,
					   stderr=subprocess.DEVNULL)


def submit(args_list):
	# Refactor for argparse and fully fleshout playbook/funcitonality.
	if len(args_list) == 0 or len(args_list) > 2:
		return

	dsname = args_list.pop()
	if args_list:
		pb_args = [{'name': 'local_file_name', 'value': args_list[0]}]
		#TODO: Create an upload playbook and execute here.

	run_playbook_w_args(
		'./submit_job.yaml',
		[{'name': 'data_set_name', 'value': dsname}])


def create(args_list):
	parser = argparse.ArgumentParser(
		prog='zosible create',
		description='Create a data set from a local file',
		parents=[parent_parser])
	parser.add_argument('local_file_name', help='local file to upload')
	parser.add_argument('data_set_name', help='name of data set to create')
	cmdargs = parser.parse_args(args_list)

	dsninfo = interpret_dsname(cmdargs.data_set_name)
	if dsninfo:
		cmdargs.data_set_name = dsninfo.name
		cmdargs.data_set_type = dsninfo.type
		run_playbook_w_args('./create.yaml', cmdargs)
	else:
		print('Error: Invalid data set name.\n'
			  'Check z/OS data set naming requirements.')


def delete(args_list):
	pass


# Setup Ansible variables and run playbook via command.
def run_playbook_w_args(playbook_name, args_dict):
	relative_path = getattr(args_dict, 'local_file_name', '')
	if relative_path:
		args_dict.local_file_name = os.path.abspath(relative_path)

	write_from_template(
		'./.zosible/vars/last_args.yaml',
		'last_args',
		{'vars_dict': vars(args_dict)})

	return subprocess.run(['ansible-playbook', playbook_name],
						  cwd='./.zosible/')


def write_from_template(filename, template_name, values):
	template_file = './{0}.j2'.format(template_name)
	template = jinja_env.get_template(template_file)
	text = template.render(values)
	write_file(filename, text)

def write_file(name, text):
	f = open(name, 'w')
	f.write(text)
	f.close()

def interpret_dsname(name):
	pattern = (r"^[a-zA-Z#@$]{1}[0-9a-zA-Z#@$-]{0,7}\."
			   r"[a-zA-Z#@$]{1}[0-9a-zA-Z#@$-]{0,7}"
			   r"(\.[a-zA-Z#@$]{1}[0-9a-zA-Z#@$-]{0,7})?"
			   r"(\([a-zA-Z#@$]{1}[0-9a-zA-Z#@$]{0,7}\))?$")

	matches = re.search(pattern, name)

	result = None
	if matches:
		result = SimpleNamespace(name=name.upper())
		result.type = 'MEMBER' if matches.group(2) else 'SEQ'

	return result


process()
